/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/MyRoom.glb -o src/components/MyRoom.jsx -k -K -r public 
*/

import React, { useEffect, useState } from "react";
import { Html, useGLTF } from "@react-three/drei";
import { useAtom } from "jotai";
import { currentPageAtom } from "./UI";
import { degToRad } from "three/src/math/MathUtils.js";

const OverlayItem = ({
  className = "",
  title,
  description,
  bgColor,
  CTA,
  link,
  ...props
}) => {
  const [currentPage] = useAtom(currentPageAtom);
  const [isHovering, setIsHovering] = useState(false);

  const handleNavigation = (e) => {
    e.preventDefault();
    if (link) {
      window.location.href = link;
    }
  };

  return (
    <Html
      transform
      distanceFactor={1.2}
      center
      className={`w-48 rounded-md overflow-hidden ${
        currentPage === "hero" ? "" : "opacity-0"
      } transition-opacity duration-1000 ${className}`}
      {...props}
    >
      <div className="bg-white bg-opacity-50 backdrop-blur-lg text-xs px-4 py-3 w-full">
        <h2 className="font-bold">{title}</h2>
        <p>{description}</p>
      </div>
      <button
        onClick={link ? handleNavigation : undefined}
        onMouseEnter={() => setIsHovering(true)}
        onMouseLeave={() => setIsHovering(false)}
        className="px-4 py-3 font-bold text-white w-full text-xs cursor-pointer transition-all duration-500"
        style={{
          backgroundColor: isHovering
            ? `var(--${bgColor}-transparent)`
            : `var(--${bgColor})`,
          cursor: link ? "pointer" : "default",
        }}
      >
        {" "}
        {CTA}
      </button>
    </Html>
  );
};

const MyRoom = ({ html, ...props }) => {
  const { nodes, materials } = useGLTF("/models/MyRoom.glb");

  useEffect(() => {
    const style = document.createElement("style");
    style.innerHTML = `
      :root {
        --purple1: rgb(110, 52, 130);
        --purple1-transparent: rgba(110, 52, 130, 0.5);
        --purple2: rgb(73, 34, 91);
        --purple2-transparent: rgba(73, 34, 91, 0.5);
        --purple3: rgb(165, 106, 189);
        --purple3-transparent: rgba(165, 106, 189, 0.5);
      }
    `;
    document.head.appendChild(style);

    return () => {
      document.head.removeChild(style);
    };
  }, []);

  return (
    <group {...props} dispose={null}>
      <group>
        <group name="Node">
          <mesh
            name="Node-Mesh"
            geometry={nodes["Node-Mesh"].geometry}
            material={materials.mat21}
          />
          {html && (
            <OverlayItem
              scale={1.5}
              rotation-y={degToRad(-10)}
              position-x={0.9}
              position-z={-0.8}
              position-y={0.95}
              title={""}
              description={
                "I love building projects as a way to learn, experiment, and improve my skills."
              }
              CTA={"Visit my portfolio"}
              bgColor={"purple1"}
              className={"transition delay-1000"}
              link="/projects"
            />
          )}
          {html && (
            <OverlayItem
              scale={1.4}
              rotation-y={degToRad(-10)}
              position-x={1.0}
              position-z={-0.1}
              position-y={-0.15}
              title={""}
              description={
                "I'm a full-stack developer based in Argentina, passionate about writing clean and efficient code."
              }
              CTA={"Learn more about me"}
              bgColor={"purple3"}
              className={"transition delay-1000"}
              link="/about"
            />
          )}
          {html && (
            <OverlayItem
              scale={1.5}
              rotation-y={degToRad(15)}
              position-x={-1.2}
              position-z={-0.88}
              position-y={0.32}
              title={""}
              description={
                "I'm open to new opportunities where I can contribute and grow as a developer"
              }
              CTA={"Contact Me"}
              bgColor={"purple2"}
              className={"transition delay-1000"}
              link="/contact"
            />
          )}
          <mesh
            name="Node-Mesh_1"
            geometry={nodes["Node-Mesh_1"].geometry}
            material={materials.mat22}
          />
          <mesh
            name="Node-Mesh_2"
            geometry={nodes["Node-Mesh_2"].geometry}
            material={materials.mat16}
          />
          <mesh
            name="Node-Mesh_3"
            geometry={nodes["Node-Mesh_3"].geometry}
            material={materials.mat18}
          />
          <mesh
            name="Node-Mesh_4"
            geometry={nodes["Node-Mesh_4"].geometry}
            material={materials.mat15}
          />
          <mesh
            name="Node-Mesh_5"
            geometry={nodes["Node-Mesh_5"].geometry}
            material={materials.mat17}
          />
          <mesh
            name="Node-Mesh_6"
            geometry={nodes["Node-Mesh_6"].geometry}
            material={materials.mat19}
          />
          <mesh
            name="Node-Mesh_7"
            geometry={nodes["Node-Mesh_7"].geometry}
            material={materials.mat20}
          />
          <mesh
            name="Node-Mesh_8"
            geometry={nodes["Node-Mesh_8"].geometry}
            material={materials.mat3}
          />
          <mesh
            name="Node-Mesh_9"
            geometry={nodes["Node-Mesh_9"].geometry}
            material={materials.mat23}
          />
          <mesh
            name="Node-Mesh_10"
            geometry={nodes["Node-Mesh_10"].geometry}
            material={materials.mat24}
          />
          <mesh
            name="Node-Mesh_11"
            geometry={nodes["Node-Mesh_11"].geometry}
            material={materials.mat8}
          />
          <mesh
            name="Node-Mesh_12"
            geometry={nodes["Node-Mesh_12"].geometry}
            material={materials.mat12}
          />
          <mesh
            name="Node-Mesh_13"
            geometry={nodes["Node-Mesh_13"].geometry}
            material={materials.mat25}
          />
          <mesh
            name="Node-Mesh_14"
            geometry={nodes["Node-Mesh_14"].geometry}
            material={materials.mat9}
          />
          <mesh
            name="Node-Mesh_15"
            geometry={nodes["Node-Mesh_15"].geometry}
            material={materials.mat14}
          />
          <mesh
            name="Node-Mesh_16"
            geometry={nodes["Node-Mesh_16"].geometry}
            material={materials.mat7}
          />
          <mesh
            name="Node-Mesh_17"
            geometry={nodes["Node-Mesh_17"].geometry}
            material={materials.mat5}
          />
        </group>
      </group>
    </group>
  );
};

useGLTF.preload("/models/MyRoom.glb");

export default MyRoom;
